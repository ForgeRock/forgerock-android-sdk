/*
 * Copyright (c) 2019 - 2023 ForgeRock. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        kotlin_version = '1.8.0'
        customCSSFile = projectDir.toString() + "/dokka/fr-backstage-styles.css"
        customLogoFile = projectDir.toString() + "/dokka/logo-icon.svg"
        customTemplatesFolder = file(projectDir.toString() + "/dokka/templates")
    }
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
        classpath "com.adarshr:gradle-test-logger-plugin:2.0.0"
        classpath 'com.google.gms:google-services:4.3.15'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.8.20"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
    id('org.sonatype.gradle.plugins.scan') version '2.4.0'
}

apply plugin: "org.jetbrains.dokka"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    apply plugin: "org.jetbrains.dokka"

    tasks.named("dokkaHtml") {
        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customCSSFile"],
                    "templatesDir": "$customTemplatesFolder"   
                }"""
            ]
        )
   }

    tasks.named("dokkaHtmlPartial") {
        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customCSSFile"],
                    "templatesDir": "$customTemplatesFolder"   
                }"""
            ]
        )
    }

    //Powermock compatibility with jdk 17
    tasks.withType(Test).configureEach{
        jvmArgs = jvmArgs + ['--add-opens=java.base/java.lang=ALL-UNNAMED']
        jvmArgs = jvmArgs + ['--add-opens=java.base/java.security=ALL-UNNAMED']
        jvmArgs = jvmArgs + ['--add-opens=java.base/java.security.cert=ALL-UNNAMED']
    }

}

afterEvaluate {
    tasks.named("dokkaHtmlMultiModule") {
        moduleName.set("ForgeRock SDK for Android")
        moduleVersion.set(project.property('VERSION'))
        outputDirectory.set(file("build/api-reference/html"))
        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customCSSFile"],
                    "customAssets": ["$customLogoFile"],
                    "templatesDir": "$customTemplatesFolder"
                }"""
            ]
        )
    }
    tasks.named("dokkaJavadocCollector") {
        moduleName.set("ForgeRock SDK for Android Javadoc")
        moduleVersion.set(project.property('VERSION'))
        outputDirectory.set(file("build/api-reference/javadoc"))
    }

}


ossIndexAudit {
    username = System.properties['username']
    password = System.properties['password']
    excludeVulnerabilityIds = ['CVE-2020-15250']
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

project.ext.versionName = VERSION
project.ext.versionCode = VERSION_CODE

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}
