/*
 * Copyright (c) 2021 ForgeRock. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */

/**
 * Generate Javadoc, delombok then generate Javadoc
 */
configurations {
    delombok
}

task delombok {
    def srcJava = 'src/main/java'
    doLast {
        ant.echo('Delomboking...')
        ant.taskdef(name: 'delombok',
                classname: 'lombok.delombok.ant.Tasks$Delombok',
                classpath: configurations.delombok.asPath)
        ant.delombok(verbose: 'true', from: srcJava, to: "$buildDir/src-delomboked")
    }
}

task javadoc(type: Javadoc, dependsOn: delombok) {
    source = "$buildDir/src-delomboked"
    destinationDir = new File("$buildDir/generated-javadoc")
    failOnError = false
    exclude '**/*.kt'
    ext.androidDoc = "${android.sdkDirectory}/docs/reference"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.linksOffline("http://d.android.com/reference", ext.androidDoc)
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    options.links("http://d.android.com/reference/")
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompileProvider().get().classpath.files
    })}


task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}