/*
 * Copyright (c) 2023-2024 ForgeRock. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */

apply plugin: 'org.jetbrains.dokka'


/**
 * Generate Kdoc, delombok then generate Javadoc
 */

task delombok {
    def srcJava = 'src/main/java'
    doLast {
        ant.echo('Delomboking...')
        ant.taskdef(name: 'delombok',
                classname: 'lombok.delombok.ant.Tasks$Delombok',
                classpath: configurations.delombok.asPath)
        ant.delombok(verbose: 'true', from: srcJava, to: "$buildDir/src-delomboked")
//        copy {
//            from "$buildDir/src-delomboked"
//            into "src/main/java"
//        }
    }
}

dokkaJavadoc.dependsOn delombok
dokkaHtml.dependsOn delombok

tasks.named("dokkaJavadoc").configure {
    dependsOn("generateDebugRFile")
    dependsOn("bundleLibCompileToJarDebug")
    dependsOn("generateReleaseRFile")
    dependsOn("bundleLibCompileToJarRelease")
}

tasks.named("dokkaHtml").configure {
    dependsOn("generateDebugRFile")
    dependsOn("bundleLibCompileToJarDebug")
    dependsOn("generateReleaseRFile")
    dependsOn("bundleLibCompileToJarRelease")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set("javadoc")
    from new File("build/javadoc/$project.name-dokka")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}